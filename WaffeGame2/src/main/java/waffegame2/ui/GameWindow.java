/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package waffegame2.ui;

import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JComponent;
import javax.swing.text.DefaultCaret;
import waffegame2.card.Card;
import waffegame2.cardOwner.CardCollection;
import waffegame2.cardOwner.Hand;
import waffegame2.cardOwner.Pack;
import waffegame2.cardOwner.Pile;
import waffegame2.player.Player;
import static waffegame2.util.Util.canSeeCards;
import static waffegame2.util.Util.canUseCards;

/**
 * The game window. Extends JFrame
 *
 * @author Walter Gr√∂nholm
 * @version 1.0
 * @since 2016-01-06
 */
public class GameWindow extends javax.swing.JFrame {

    /**
     * Creates new form GraphicalUI
     */
    private Pile pile;
    private Pack pack;

    private GraphicalUI ui;
    private Map<Card, CardButton> cardButtonMap;

    public GameWindow(GraphicalUI ui) {
        this.ui = ui;
        this.cardButtonMap = new HashMap();

        initComponents();
        DefaultCaret caret = (DefaultCaret) jTextAreaOutput.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelGame = new javax.swing.JPanel();
        jPanelWinners = new javax.swing.JPanel();
        jButtonWinners = new javax.swing.JButton();
        jScrollPaneWinners = new javax.swing.JScrollPane();
        jTextAreaWinners = new javax.swing.JTextArea();
        selectorSubWindow = new javax.swing.JPanel();
        selectorSWHit = new javax.swing.JButton();
        selectorSWPass = new javax.swing.JButton();
        continueSubWindow = new javax.swing.JPanel();
        continueSWLabel = new javax.swing.JLabel();
        continueSWButton = new javax.swing.JButton();
        mainWindow = new javax.swing.JLayeredPane();
        pileWindow = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jPanelSide = new javax.swing.JPanel();
        jScrollPanePlayers = new javax.swing.JScrollPane();
        jListPlayerList = new javax.swing.JList();
        jPanelText = new javax.swing.JPanel();
        jTextField = new javax.swing.JTextField();
        jScrollPaneOutput = new javax.swing.JScrollPane();
        jTextAreaOutput = new javax.swing.JTextArea();
        jButtonSubmit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanelGame.setBackground(new java.awt.Color(255, 255, 255));
        jPanelGame.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanelGame.setPreferredSize(new java.awt.Dimension(800, 400));
        jPanelGame.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelWinners.setBackground(new java.awt.Color(255, 255, 255));

        jButtonWinners.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonWinners.setText("Play again");
        jButtonWinners.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWinnersActionPerformed(evt);
            }
        });

        jTextAreaWinners.setEditable(false);
        jTextAreaWinners.setColumns(20);
        jTextAreaWinners.setRows(5);
        jScrollPaneWinners.setViewportView(jTextAreaWinners);

        javax.swing.GroupLayout jPanelWinnersLayout = new javax.swing.GroupLayout(jPanelWinners);
        jPanelWinners.setLayout(jPanelWinnersLayout);
        jPanelWinnersLayout.setHorizontalGroup(
            jPanelWinnersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelWinnersLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jButtonWinners, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
            .addGroup(jPanelWinnersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneWinners)
                .addContainerGap())
        );
        jPanelWinnersLayout.setVerticalGroup(
            jPanelWinnersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelWinnersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneWinners, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonWinners, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanelGame.add(jPanelWinners, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, 340, 320));

        selectorSubWindow.setEnabled(false);

        selectorSWHit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectorSWHit.setText("HIT");
        selectorSWHit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorSWHitActionPerformed(evt);
            }
        });

        selectorSWPass.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectorSWPass.setText("PASS");
        selectorSWPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorSWPassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout selectorSubWindowLayout = new javax.swing.GroupLayout(selectorSubWindow);
        selectorSubWindow.setLayout(selectorSubWindowLayout);
        selectorSubWindowLayout.setHorizontalGroup(
            selectorSubWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selectorSubWindowLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(selectorSubWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(selectorSWHit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectorSWPass, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                .addGap(3, 3, 3))
        );
        selectorSubWindowLayout.setVerticalGroup(
            selectorSubWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectorSubWindowLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addComponent(selectorSWHit, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(selectorSWPass, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3))
        );

        jPanelGame.add(selectorSubWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 90, -1));

        continueSubWindow.setToolTipText("");
        continueSubWindow.setEnabled(false);
        continueSubWindow.setPreferredSize(new java.awt.Dimension(200, 92));

        continueSWLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        continueSWLabel.setText("Click here to continue");

        continueSWButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        continueSWButton.setText("OK");
        continueSWButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueSWButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout continueSubWindowLayout = new javax.swing.GroupLayout(continueSubWindow);
        continueSubWindow.setLayout(continueSubWindowLayout);
        continueSubWindowLayout.setHorizontalGroup(
            continueSubWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(continueSubWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(continueSubWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(continueSWButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(continueSWLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addContainerGap())
        );
        continueSubWindowLayout.setVerticalGroup(
            continueSubWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(continueSubWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(continueSWLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(continueSWButton, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanelGame.add(continueSubWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 180, -1, -1));

        mainWindow.setLayout(new java.awt.GridLayout(3, 10));
        jPanelGame.add(mainWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 300));

        pileWindow.setLayout(new java.awt.FlowLayout());
        jPanelGame.add(pileWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 300, 710, 100));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Pile");
        jPanelGame.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 330, 30, 20));

        jPanelSide.setBackground(new java.awt.Color(255, 255, 255));
        jPanelSide.setBorder(javax.swing.BorderFactory.createTitledBorder("Players"));

        jListPlayerList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "player1", "player2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPanePlayers.setViewportView(jListPlayerList);

        javax.swing.GroupLayout jPanelSideLayout = new javax.swing.GroupLayout(jPanelSide);
        jPanelSide.setLayout(jPanelSideLayout);
        jPanelSideLayout.setHorizontalGroup(
            jPanelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPanePlayers, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
        );
        jPanelSideLayout.setVerticalGroup(
            jPanelSideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPanePlayers)
        );

        jPanelText.setBackground(new java.awt.Color(255, 255, 255));

        jTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldKeyPressed(evt);
            }
        });

        jTextAreaOutput.setEditable(false);
        jTextAreaOutput.setColumns(55);
        jTextAreaOutput.setRows(7);
        jTextAreaOutput.setTabSize(4);
        jTextAreaOutput.setToolTipText("");
        jTextAreaOutput.setBorder(null);
        jScrollPaneOutput.setViewportView(jTextAreaOutput);

        jButtonSubmit.setText("Submit");
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelTextLayout = new javax.swing.GroupLayout(jPanelText);
        jPanelText.setLayout(jPanelTextLayout);
        jPanelTextLayout.setHorizontalGroup(
            jPanelTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneOutput)
            .addGroup(jPanelTextLayout.createSequentialGroup()
                .addComponent(jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonSubmit))
        );
        jPanelTextLayout.setVerticalGroup(
            jPanelTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTextLayout.createSequentialGroup()
                .addComponent(jScrollPaneOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jPanelTextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSubmit)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelSide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanelGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelGame, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelSide, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Checks if the enter key has been pressed while the textField has focus
     *
     * @param evt KeyEvent to check
     */
    private void jTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKeyPressed
        if (jTextField.isFocusOwner()) {
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_ENTER:
                    submitLine();
            }
        }
    }//GEN-LAST:event_jTextFieldKeyPressed

    /**
     * Submits line from jTextField
     *
     * @param evt
     */
    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        submitLine();
    }//GEN-LAST:event_jButtonSubmitActionPerformed

    /**
     * Notifies the GraphicalUI that the continue button has been pressed
     *
     * @param evt
     */
    private void continueSWButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueSWButtonActionPerformed
        ui.recieveAction(EventFlag.PRETURN_CONTINUE_BUTTON, null);
    }//GEN-LAST:event_continueSWButtonActionPerformed

    /**
     * Notifies the GraphicalUI that the pass button has been pressed
     *
     * @param evt
     */
    private void selectorSWPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorSWPassActionPerformed
        ui.recieveAction(EventFlag.SELECTION_BUTTONS, EventFlag.PASS_BUTTON, null);
    }//GEN-LAST:event_selectorSWPassActionPerformed

    /**
     * Notifies the GraphicalUI that the hit button has been pressed
     *
     * @param evt
     */
    private void selectorSWHitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorSWHitActionPerformed
        //can't hit if no selections!
        ui.recieveAction(EventFlag.SELECTION_BUTTONS, EventFlag.HIT_BUTTON, null);
    }//GEN-LAST:event_selectorSWHitActionPerformed

    /**
     * Notifies the GraphicalUI that the game restart button was pressed
     *
     * @param evt
     */
    private void jButtonWinnersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWinnersActionPerformed
        ui.recieveAction(EventFlag.RESTART_BUTTON, null);
    }//GEN-LAST:event_jButtonWinnersActionPerformed

    /**
     * Notifies the GraphicalUI that a CardButton has been pressed
     *
     * @param card the card of the CardButton that was pressed
     * @param evt
     */
    public void cardButtonHitActionPerformed(Card card, java.awt.event.ActionEvent evt) {
        ui.recieveAction(EventFlag.SELECTION_BUTTONS, EventFlag.CARD_BUTTON, card);
    }

    /**
     * prints line from jTextField and also notifies the GraphicalUI of it
     */
    private void submitLine() {
        String input = jTextField.getText();
        if (input.length() > 0) {
            println(input);
            jTextField.setText("");
        }
        ui.recieveAction(EventFlag.CHAT_STRING, input);
    }

    /**
     * prints a new line in console and in the chat
     *
     * @param text
     */
    public void printlnBoth(String text) {
        println(text);
        System.out.println(text);
    }

    /**
     * prints the text in chat on a new line
     *
     * @param text the text to be printed
     */
    public void println(String text) {
        print("\n" + text);
    }

    /**
     * prints the text in chat
     *
     * @param text the text to be printed
     */
    public void print(String text) {
        if (text != null) {
            jTextAreaOutput.setText(jTextAreaOutput.getText() + text);
        }
    }

    /**
     * Clears all CardButtons and hides pop-up panels
     */
    public void setup() {
        cardButtonMap.clear();
        mainWindow.removeAll();
        pileWindow.removeAll();
        hideContinueButton();
        hideWinnersWindow();
        disableSelectorButtons();
    }

    /**
     * Shows option window, NOT YET IMPLEMENTED
     */
    public void showOptionWindow() {
    }

    /**
     * Hides option window, NOT YET IMPLEMENTED
     */
    public void hideOptionWindow() {
    }

    public void setPack(Pack pack) {
        this.pack = pack;
    }

    public void setPile(Pile pile) {
        this.pile = pile;
    }

    /**
     * Creates a CardButton and adds it to the cardButtonMap
     *
     * @param card the card which the CardButton illustrates
     * @return the created CardButton
     */
    private CardButton createCardButton(Card card) {
        CardButton button = new CardButton(card);
        button.setVisible(true);
        button.setPreferredSize(new Dimension(48, 80));
        button.addActionListener(new CardButtonListener(this, card, button));
        cardButtonMap.put(card, button);
        return button;
    }

    /**
     * Creates a CardButton and adds it to a JComponent
     *
     * @param card the card which the CardButton illustrates
     * @param where the JComponent to add it to
     * @return the created CardButton
     */
    private CardButton createCardGraphics(Card card, JComponent where) {
        CardButton sprite = createCardButton(card);

        where.add(sprite);
        where.revalidate();
        validate();

        return sprite;
    }

    /**
     * Creates CardButtons and adds them to a JComponent
     *
     * @param cards the cards which the CardButtons illustrate
     * @param where the JComponent to add them to
     * @return a list of the created CardButtons
     */
    private List<CardButton> createCardGraphics(List<Card> cards, JComponent where) {
        List<CardButton> rv = new ArrayList();
        for (Card card : cards) {
            CardButton sprite = createCardButton(card);
            where.add(sprite);
            rv.add(sprite);
        }
        where.revalidate();
        validate();
        return rv;
    }

    /**
     * Hides and disables all CardButtons
     */
    public void hideCardSprites() {
        for (CardButton sprite : cardButtonMap.values()) {
            sprite.setFaceUp(false);
            sprite.setEnabled(false);
        }
    }

    /**
     * Finds a CardButton that illustrates the specified card. Creates one if
     * unable to find.
     *
     * @param card the card which the CardButton should illustrate
     * @return a CardButton for the card
     */
    private CardButton getOrCreateCardButton(Card card) {
        if (cardButtonMap.containsKey(card)) {
            return cardButtonMap.get(card);
        } else {
            return createCardGraphics(card, mainWindow);
        }
    }

    /**
     * Turns all cards face up that are visible to the player.
     *
     * @param player the player whose turn it is
     * @param playable list of all hands that can be used to make the selection
     */
    public void showVisibleCardSprites(Player player, List<Hand> playable) {
        for (Hand hand : playable) {
            setSpritesFaceUp(hand.getCards(), canSeeCards(player, hand));
        }
    }

    /**
     * Sets the CardButtons who illustrate the cards to be face up
     *
     * @param cards a list of cards
     * @param b true to set them face up
     */
    private void setSpritesFaceUp(List<Card> cards, boolean b) {
        for (Card card : cards) {
            getOrCreateCardButton(card).setFaceUp(b);
        }
    }

    /**
     * Enables all CardButtons that are usable by the player.
     *
     * @param player the player whose turn it is
     * @param playable list of all hands that can be used to make the selection
     */
    public void enablePlayableCardSprites(Player player, List<Hand> playable) {
        for (Hand hand : playable) {
            setSpritesEnabled(hand.getCards(), canUseCards(player, hand));
        }
    }

    /**
     * Sets the CardButtons who illustrate the cards to be enabled
     *
     * @param cards a list of cards
     * @param b true to set them face up
     */
    private void setSpritesEnabled(List<Card> cards, boolean b) {
        for (Card card : cards) {
            getOrCreateCardButton(card).setEnabled(b);
        }
    }

    /**
     * Finds the CardButtons for all selected cards and sets them to be
     * selected.
     *
     * @param player the player whose turn it is
     * @param playable list of all hands that can be used to make the selection
     * @param selected the CardCollection of all selected cards
     */
    public void showSelectedCardSprites(Player player, List<Hand> playable, CardCollection selected) {
        for (Hand hand : playable) {
            for (Card card : hand.getCards()) {
                getOrCreateCardButton(card).selectCard(selected.contains(card));
            }
        }
    }

    /**
     * Shows the continue button
     */
    public void showContinueButton() {
        continueSubWindow.setEnabled(true);
        continueSWButton.setEnabled(true);
        continueSubWindow.setVisible(true);
        continueSWButton.setVisible(true);
    }

    /**
     * Hides the continue button
     */
    public void hideContinueButton() {
        continueSubWindow.setEnabled(false);
        continueSWButton.setEnabled(false);
        continueSubWindow.setVisible(false);
        continueSWButton.setVisible(false);
    }

    /**
     * Shows the selector buttons, hit and pass
     */
    public void showSelectorButtons() {
        selectorSubWindow.setEnabled(true);
        selectorSWHit.setEnabled(true);
        selectorSWPass.setEnabled(true);
        selectorSubWindow.setVisible(true);
        selectorSWHit.setVisible(true);
        selectorSWPass.setVisible(true);
    }

    /**
     * Disables the selector buttons, hit and pass
     */
    public void disableSelectorButtons() {
        selectorSubWindow.setEnabled(false);
        selectorSWHit.setEnabled(false);
        selectorSWPass.setEnabled(false);
    }

    /**
     * Displays the winner
     *
     * @param player the winner to be displayed
     */
    public void showWinner(Player player) {
        resetPileWindow();
        showWinnersWindow();
        jTextAreaWinners.setText(player + " is the Winner!\n\nhttp://tehurn.com/");
    }

    /**
     * Displays the winners
     *
     * @param players the winners to be displayed
     */
    public void showWinners(List<Player> players) {
        resetPileWindow();
        showWinnersWindow();
        String str = "";
        if (!players.isEmpty()) {
            for (int i = 0; i < players.size() - 1; i++) {
                str += players.get(i).getName() + ", ";
            }
            str += players.get(players.size() - 1).getName();
        }
        jTextAreaWinners.setText(str + " are the Winners!\n\nhttp://tehurn.com/");
    }

    /**
     * Hides the winners window
     */
    public void hideWinnersWindow() {
        jPanelWinners.setEnabled(false);
        jTextAreaWinners.setEnabled(false);
        jScrollPaneWinners.setEnabled(false);
        jButtonWinners.setEnabled(false);
        jPanelWinners.setVisible(false);
        jTextAreaWinners.setVisible(false);
        jScrollPaneWinners.setVisible(false);
        jButtonWinners.setVisible(false);
    }

    /**
     * Shows the winners window
     */
    public void showWinnersWindow() {
        jPanelWinners.setEnabled(true);
        jTextAreaWinners.setEnabled(true);
        jScrollPaneWinners.setEnabled(true);
        jButtonWinners.setEnabled(true);
        jPanelWinners.setVisible(true);
        jTextAreaWinners.setVisible(true);
        jScrollPaneWinners.setVisible(true);
        jButtonWinners.setVisible(true);
    }

    /**
     * Resets the pile window
     */
    public void resetPileWindow() {
        pileWindow.removeAll();
        pileWindow.revalidate();
        validate();
    }

    /**
     * Updates the displayed CardButtons, moving them from the mainWindow to the
     * pileWindow
     */
    public void preTurn() {
        List<Card> pileCards = pile.getCards();
        List<CardButton> toBeRemoved = new ArrayList();
        for (CardButton button : cardButtonMap.values()) {
            if (pileCards.contains(button.getCard())) {
                toBeRemoved.add(button);
                createCardGraphics(button.getCard(), pileWindow).setToPile(true);
            }
        }
        removeCardButtons(toBeRemoved, mainWindow);
    }

    /**
     * Removes a list of CardButtons from a JComponent
     *
     * @param list the list of CardButtons to be removed
     * @param fromWhere the JComponent to remove the CardButtons from
     */
    private void removeCardButtons(List<CardButton> list, JComponent fromWhere) {
        for (CardButton button : list) {
            fromWhere.remove(button);
            cardButtonMap.remove(button.getCard());
        }
        fromWhere.revalidate();
        validate();
    }

    /**
     * Updates all CardButtons
     *
     * @param player the player whose turn it is
     * @param playable list of all hands that can be used to make the selection
     * @param selected the CardCollection of all selected cards
     */
    public void showSelectedCards(Player player, List<Hand> playable, CardCollection selected) {
        showVisibleCardSprites(player, playable);
        showSelectedCardSprites(player, playable, selected);
        enablePlayableCardSprites(player, playable);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton continueSWButton;
    private javax.swing.JLabel continueSWLabel;
    private javax.swing.JPanel continueSubWindow;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JButton jButtonWinners;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jListPlayerList;
    private javax.swing.JPanel jPanelGame;
    private javax.swing.JPanel jPanelSide;
    private javax.swing.JPanel jPanelText;
    private javax.swing.JPanel jPanelWinners;
    private javax.swing.JScrollPane jScrollPaneOutput;
    private javax.swing.JScrollPane jScrollPanePlayers;
    private javax.swing.JScrollPane jScrollPaneWinners;
    private javax.swing.JTextArea jTextAreaOutput;
    private javax.swing.JTextArea jTextAreaWinners;
    private javax.swing.JTextField jTextField;
    private javax.swing.JLayeredPane mainWindow;
    private javax.swing.JLayeredPane pileWindow;
    private javax.swing.JButton selectorSWHit;
    private javax.swing.JButton selectorSWPass;
    private javax.swing.JPanel selectorSubWindow;
    // End of variables declaration//GEN-END:variables

}
